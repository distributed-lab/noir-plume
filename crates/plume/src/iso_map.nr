use std::bigint::Secpk1Fq;
use crate::constants::SECP256K1_PRIME;
use crate::ec_ops::Point;

/*
k_(1,3) * x^3 + 
k_(1,2) * x^2 + 
k_(1,1) * x   +
k_(1,0)
*/
fn x_num(x: Secpk1Fq, x_2: Secpk1Fq, x_3: Secpk1Fq) -> Secpk1Fq {
    let k1_0 = Secpk1Fq::from_le_bytes(get_k_1_0());
    let k1_1 = Secpk1Fq::from_le_bytes(get_k_1_1());
    let k1_2 = Secpk1Fq::from_le_bytes(get_k_1_2());
    let k1_3 = Secpk1Fq::from_le_bytes(get_k_1_3());
    k1_0 + k1_1 * x + k1_2 * x_2 + k1_3 * x_3
}

/*
x'^2 +
k_(2,1) * x' +
k_(2,0)
*/
fn x_den(x: Secpk1Fq, x_2: Secpk1Fq) -> Secpk1Fq {
    let k2_0 = Secpk1Fq::from_le_bytes(get_k_2_0());
    let k2_1 = Secpk1Fq::from_le_bytes(get_k_2_1());
    x_2 + k2_1 * x + k2_0
}

/*
k_(3,3) * x'^3 +
k_(3,2) * x'^2 +
k_(3,1) * x' +
k_(3,0)
*/
fn y_num(x: Secpk1Fq, x_2: Secpk1Fq, x_3: Secpk1Fq) -> Secpk1Fq {
    let k3_0 = Secpk1Fq::from_le_bytes(get_k_3_0());
    let k3_1 = Secpk1Fq::from_le_bytes(get_k_3_1());
    let k3_2 = Secpk1Fq::from_le_bytes(get_k_3_2());
    let k3_3 = Secpk1Fq::from_le_bytes(get_k_3_3());
    k3_0 + k3_1 * x + k3_2 * x_2 + k3_3 * x_3
}

/*
x'^3 +
k_(4,2) * x'^2 +
k_(4,1) * x' +
k_(4,0)
*/
fn y_den(x: Secpk1Fq, x_2: Secpk1Fq, x_3: Secpk1Fq) -> Secpk1Fq {
    let k4_0 = Secpk1Fq::from_le_bytes(get_k_4_0());
    let k4_1 = Secpk1Fq::from_le_bytes(get_k_4_1());
    let k4_2 = Secpk1Fq::from_le_bytes(get_k_4_2());
    k4_0 + k4_1 * x + k4_2 * x_2 + x_3
}

// https://www.ietf.org/archive/id/draft-irtf-cfrg-hash-to-curve-13.html#name-3-isogeny-map-for-secp256k1
pub fn iso_map(p: Point) -> Point {
    let (x, y) = p;

    // Step 1. Calculate x^2
    // Step 2. Calculate x^3
    let x_2 = x * x;
    let x_3 = x_2 * x;

    let x_num = x_num(x, x_2, x_3);
    let x_den = x_den(x, x_2);
    let y_num = y_num(x, x_2, x_3);
    let y_den = y_den(x, x_2, x_3);

    let x = (x_num / x_den);
    let y = (y * y_num / y_den);
    (x, y)
}

#[test]
fn test_iso_map() {
    let p = (Secpk1Fq::from_le_bytes(
            &[
        234, 37, 9, 54, 187, 229, 107, 235,
        237, 49, 196, 35, 95, 174, 247, 160,
        85, 100, 3, 87, 65, 16, 136, 148,
        106, 65, 146, 45, 83, 206, 236, 141
    ]
        ), Secpk1Fq::from_le_bytes(
            &[
        74, 218, 165, 198, 134, 228, 97, 243,
        190, 229, 69, 77, 46, 210, 19, 124,
        166, 44, 107, 238, 93, 62, 19, 74,
        189, 71, 104, 50, 28, 174, 73, 226
    ]
        ));

    let actual_p = iso_map(p);

    let expected_p = (Secpk1Fq::from_le_bytes(
            &[
        248, 159, 226, 176, 248, 57, 16, 215,
        154, 253, 32, 122, 148, 42, 124, 230,
        67, 118, 80, 123, 130, 94, 244, 92,
        254, 0, 94, 26, 38, 109, 157, 248
    ]
        ), Secpk1Fq::from_le_bytes(
            &[
        87, 175, 108, 128, 252, 207, 29, 238,
        28, 188, 99, 213, 54, 233, 28, 203,
        170, 177, 172, 195, 198, 145, 173, 110,
        23, 169, 52, 204, 224, 85, 56, 179
    ]
        ));
    assert(actual_p == expected_p);
}

// Constants
fn get_k_1_0() -> [u8] {
    [
        199, 168, 170, 170, 141, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142
    ]
}
fn get_k_1_1() -> [u8] {
    [
        129, 101, 124, 241, 68, 16, 255, 223, 146, 59, 246, 11, 252, 210, 149, 213, 197, 68, 253, 167, 206, 21, 243, 185, 213, 33, 195, 11, 200, 212, 211, 7
    ]
}
fn get_k_1_2() -> [u8] {
    [
        98, 210, 157, 61, 181, 208, 203, 78, 49, 64, 124, 3, 68, 97, 80, 228, 236, 202, 37, 202, 222, 19, 164, 226, 230, 52, 242, 35, 141, 50, 76, 83
    ]
}
fn get_k_1_3() -> [u8] {
    [
        140, 168, 170, 170, 141, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142, 227, 56, 142
    ]
}

fn get_k_2_0() -> [u8] {
    [
        155, 180, 30, 120, 69, 183, 230, 159, 125, 72, 248, 66, 149, 64, 205, 134, 221, 64, 182, 183, 203, 76, 163, 156, 138, 145, 148, 61, 25, 113, 87, 211
    ]
}
fn get_k_2_1() -> [u8] {
    [
        20, 109, 140, 42, 97, 86, 42, 197, 187, 65, 94, 31, 100, 107, 211, 6, 84, 34, 84, 27, 213, 178, 196, 247, 29, 220, 131, 67, 246, 198, 173, 237
    ]
}

fn get_k_3_0() -> [u8] {
    [
        60, 226, 56, 142, 75, 104, 47, 161, 189, 132, 246, 18, 218, 75, 104, 47, 161, 189, 132, 246, 18, 218, 75, 104, 47, 161, 189, 132, 246, 18, 218, 75
    ]
}
fn get_k_3_1() -> [u8] {
    [
        163, 113, 29, 32, 252, 144, 252, 223, 111, 218, 134, 214, 70, 176, 122, 100, 213, 166, 160, 18, 75, 165, 208, 169, 15, 124, 203, 213, 50, 12, 94, 199
    ]
}
fn get_k_3_2() -> [u8] {
    [
        49, 233, 206, 158, 90, 232, 101, 167, 24, 32, 190, 1, 162, 48, 40, 114, 118, 229, 18, 101, 239, 9, 82, 113, 115, 26, 249, 145, 70, 25, 166, 41
    ]
}
fn get_k_3_3() -> [u8] {
    [
        132, 141, 227, 56, 47, 161, 189, 132, 246, 18, 218, 75, 104, 47, 161, 189, 132, 246, 18, 218, 75, 104, 47, 161, 189, 132, 246, 18, 218, 75, 104, 47
    ]
}

fn get_k_4_0() -> [u8] {
    [
        59, 249, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
    ]
}
fn get_k_4_1() -> [u8] {
    [
        115, 37, 92, 104, 210, 37, 180, 223, 120, 217, 232, 200, 191, 193, 103, 148, 152, 194, 34, 39, 99, 230, 233, 213, 159, 180, 189, 184, 75, 83, 6, 122
    ]
}
fn get_k_4_2() -> [u8] {
    [
        111, 167, 210, 191, 146, 129, 191, 167, 153, 98, 13, 47, 22, 33, 61, 10, 126, 51, 254, 168, 63, 12, 167, 243, 44, 202, 69, 101, 113, 170, 132, 100
    ]
}
