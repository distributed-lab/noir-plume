/*
    secp256k1_XMD:SHA-256_SSWU_RO_
    
    Based on the code from the link below:
    
    https://github.com/geometryxyz/secp256k1_hash_to_curve
*/

use noir_bigcurve::curves::secp256k1::Secp256k1;

use crate::hash_to_field::hash_to_field;
use crate::iso_map::iso_map;
use crate::map_to_curve::map_to_curve;

pub fn hash_to_curve<let N: u32>(msg: [u8; N]) -> Secp256k1 {
    let u = hash_to_field(msg);

    let q0 = map_to_curve(u.x);
    let q1 = map_to_curve(u.y);

    iso_map(q0) + iso_map(q1)
}

// Data for test cases is taken from the link below:
// https://www.ietf.org/archive/id/draft-irtf-cfrg-hash-to-curve-13.html#name-secp256k1_xmdsha-256_sswu_r

#[test]
fn test_hash_to_curve_for_empty_msg() {
    let msg = [];

    let actual_p = hash_to_curve(msg);

    let expected_px = [
        232, 199, 50, 218, 191, 67, 168, 246, 54, 115, 59, 179, 90, 86, 246, 82, 190, 47, 195, 132,
        33, 192, 35, 50, 168, 167, 142, 11, 188, 142, 225, 166,
    ];
    let expected_py = [
        37, 250, 210, 30, 183, 62, 17, 31, 222, 179, 207, 242, 130, 27, 12, 100, 199, 202, 221, 220,
        150, 37, 130, 230, 237, 45, 60, 31, 182, 58, 96, 191,
    ];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

// #[test]
// fn test_hash_to_curve_for_msg_abc() {
//     let msg = [97, 98, 99]; // "abc"
//     let actual_p = hash_to_curve(msg);

//     let expected_px = [
//         206, 172, 201, 146, 220, 248, 27, 174, 217, 219, 11, 151, 78, 12, 150, 202, 148, 254, 91,
//         21, 50, 253, 167, 238, 191, 104, 229, 184, 205, 38, 36, 19,
//     ];
//     let expected_py = [
//         117, 193, 51, 132, 12, 219, 106, 124, 224, 78, 239, 17, 66, 246, 119, 178, 71, 112, 96, 114,
//         19, 138, 245, 234, 155, 186, 224, 88, 61, 57, 244, 71,
//     ];

//     assert(actual_p.x.to_le_bytes() == expected_px);
//     assert(actual_p.y.to_le_bytes() == expected_py);
// }

#[test]
fn test_hash_to_curve_for_msg_abcdef0123456789() {
    let msg = [97, 98, 99, 100, 101, 102, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57];

    let actual_p = hash_to_curve(msg);

    let expected_px = [
        172, 100, 68, 37, 136, 145, 166, 235, 85, 201, 2, 106, 211, 242, 39, 255, 199, 218, 148,
        238, 169, 163, 79, 155, 228, 76, 100, 207, 51, 250, 50, 153,
    ];
    let expected_py = [
        79, 227, 202, 13, 20, 178, 211, 9, 183, 6, 248, 152, 155, 119, 65, 48, 44, 158, 36, 75, 76,
        93, 51, 114, 65, 141, 205, 154, 135, 184, 126, 169,
    ];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

#[test]
fn test_hash_to_curve_for_msg_q128() {
    let msg = [
        113, 49, 50, 56, 95, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113,
    ];

    let actual_p = hash_to_curve(msg);

    let expected_px = [
        157, 177, 93, 171, 136, 59, 147, 182, 229, 4, 141, 128, 123, 169, 231, 156, 121, 60, 23, 51,
        222, 200, 49, 113, 65, 217, 140, 1, 34, 60, 182, 247,
    ];
    let expected_py = [
        175, 242, 21, 172, 11, 9, 92, 23, 54, 57, 58, 241, 26, 178, 33, 137, 212, 251, 175, 25, 169,
        32, 91, 54, 109, 202, 62, 6, 165, 59, 157, 99,
    ];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

#[test]
fn test_hash_to_curve_for_msg_a512() {
    let msg = [
        97, 53, 49, 50, 95, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
    ];

    let actual_p = hash_to_curve(msg);

    let expected_px = [
        37, 91, 186, 215, 101, 184, 203, 170, 151, 144, 112, 94, 178, 224, 2, 202, 74, 119, 210, 62,
        112, 69, 133, 1, 72, 199, 85, 95, 251, 220, 101, 219,
    ];
    let expected_py = [
        244, 88, 223, 54, 42, 243, 148, 68, 36, 26, 100, 78, 213, 253, 77, 60, 224, 255, 23, 93, 63,
        202, 242, 184, 105, 91, 195, 87, 7, 170, 64, 151,
    ];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

