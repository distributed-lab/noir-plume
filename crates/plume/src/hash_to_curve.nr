/*
    secp256k1_XMD:SHA-256_SSWU_RO_
    
    Based on the code from the link below:
    
    https://github.com/geometryxyz/secp256k1_hash_to_curve
*/

use noir_bigcurve::curves::secp256k1::Secp256k1;

use crate::hash_to_field::hash_to_field;
use crate::iso_map::iso_map;
use crate::map_to_curve::map_to_curve;

pub fn hash_to_curve<let N: u32>(msg: [u8; N]) -> Secp256k1 {
    let u = hash_to_field(msg);

    let q0 = map_to_curve(u.x);
    let q1 = map_to_curve(u.y);

    iso_map(q0) + iso_map(q1)
}

// Data for test cases is taken from the link below:
// https://www.ietf.org/archive/id/draft-irtf-cfrg-hash-to-curve-13.html#name-secp256k1_xmdsha-256_sswu_r

#[test]
fn test_hash_to_curve_for_empty_msg() {
    let msg = [];

    let actual_p = hash_to_curve(msg);

    let expected_px = [233, 215, 131, 22, 103, 248, 192, 129, 247, 34, 221, 149, 101, 63, 192, 23, 130, 54, 49, 248, 190, 109, 20, 186, 1, 109, 170, 98, 42, 97, 181, 32];
    let expected_py = [138, 99, 209, 70, 180, 154, 164, 92, 238, 130, 149, 179, 153, 204, 201, 160, 155, 88, 12, 232, 163, 174, 226, 100, 73, 95, 96, 72, 39, 169, 97, 94];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

#[test]
fn test_hash_to_curve_for_msg_abc() {
    let msg = [97, 98, 99]; // "abc"
    let actual_p = hash_to_curve(msg);

    let expected_px = [200, 167, 7, 215, 99, 12, 174, 165, 113, 245, 225, 17, 158, 254, 251, 117, 165, 193, 66, 177, 221, 10, 6, 246, 8, 196, 65, 64, 112, 168, 204, 82];
    let expected_py = [52, 119, 250, 33, 162, 65, 185, 104, 178, 251, 186, 220, 142, 121, 152, 101, 4, 65, 143, 200, 203, 5, 149, 53, 0, 239, 156, 206, 115, 126, 64, 82];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

#[test]
fn test_hash_to_curve_for_msg_abcdef0123456789() {
    let msg = [97, 98, 99, 100, 101, 102, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57];

    let actual_p = hash_to_curve(msg);

    let expected_px = [27, 237, 43, 181, 233, 108, 113, 207, 191, 226, 130, 203, 134, 10, 51, 194, 144, 130, 225, 110, 210, 13, 103, 196, 133, 203, 19, 244, 37, 73, 48, 87];
    let expected_py = [113, 154, 197, 61, 183, 45, 39, 110, 234, 79, 106, 203, 38, 85, 205, 209, 41, 43, 20, 1, 202, 138, 252, 222, 200, 99, 100, 127, 88, 36, 124, 222];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

#[test]
fn test_hash_to_curve_for_msg_q128() {
    let msg = [
        113, 49, 50, 56, 95, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 113, 113,
    ];

    let actual_p = hash_to_curve(msg);

    let expected_px = [248, 87, 92, 202, 45, 60, 228, 209, 225, 47, 136, 219, 120, 12, 12, 213, 26, 18, 250, 110, 12, 5, 227, 137, 35, 11, 117, 228, 194, 163, 6, 194];
    let expected_py = [0, 46, 224, 173, 231, 171, 158, 28, 43, 157, 236, 134, 117, 21, 102, 60, 207, 169, 12, 34, 49, 29, 234, 240, 136, 169, 87, 183, 118, 181, 148, 77];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

#[test]
fn test_hash_to_curve_for_msg_a512() {
    let msg = [
        97, 53, 49, 50, 95, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
        97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
    ];

    let actual_p = hash_to_curve(msg);

    let expected_px = [27, 3, 250, 41, 101, 101, 190, 55, 196, 31, 239, 250, 66, 140, 239, 9, 80, 41, 174, 230, 15, 251, 245, 110, 247, 121, 160, 84, 234, 101, 218, 80];
    let expected_py = [16, 78, 50, 6, 62, 254, 196, 254, 20, 157, 141, 156, 97, 34, 166, 239, 68, 24, 52, 52, 173, 122, 63, 126, 230, 205, 39, 56, 141, 8, 238, 198];

    assert(actual_p.x.to_le_bytes() == expected_px);
    assert(actual_p.y.to_le_bytes() == expected_py);
}

